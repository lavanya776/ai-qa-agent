
export enum AppTab {
  DASHBOARD = "Dashboard",
  SETUP = "Setup",
  AI_DISCOVERY = "AI Discovery",
  TEST_GENERATION = "Test Generation",
  TEST_SUITE = "Test Suite",
  TEST_EXECUTION = "Test Execution",
}

export interface SetupInfo {
  appUrl: string;
  appDescription: string;
  loginDetails: string; // Simplified for now
  googleSheetLink: string;
}

export interface DiscoveredModule {
  id: string;
  name: string;
  description: string;
  insights?: string; // Generated by AI
}

// For Gemini's suggestion, before adding client-side fields
export interface SuggestedModule {
    name: string;
    description: string;
}

export enum TestType {
  FUNCTIONAL = "Functional",
  UI_UX = "UI/UX",
  NEGATIVE = "Negative",
  EDGE_CASE = "Edge Case",
  ACCESSIBILITY = "Basic Accessibility",
  SECURITY = "Basic Security",
  PERFORMANCE = "Basic Performance",
  INTEGRATION = "Integration",
  RESPONSIVENESS = "Responsiveness",
  CROSS_BROWSER_COMPATIBILITY = "Cross-Browser Compatibility",
}

export const ALL_TEST_TYPES: TestType[] = Object.values(TestType);

export enum TestStatus {
  PENDING = "Pending",
  PASSED = "Passed",
  FAILED = "Failed",
  BLOCKED = "Blocked",
}

export interface TestCase {
  id: string;
  title: string;
  description: string;
  steps: string[];
  expectedResults: string;
  type: TestType;
  module: string;
  status: TestStatus;
  actualResults?: string;
  // screenshot field is omitted for simplicity in this version
  // screenshot?: string; // URL or base64 data, or just a file name
}

// For Gemini's generation, before adding client-side fields
export interface GeneratedTestCaseData {
  title: string;
  description: string;
  steps: string[];
  expectedResults: string;
  type: string; // Gemini will return a string, we'll parse to TestType
}

// For Gemini's auto-execution prediction
export interface AutoExecutionResult {
  status: TestStatus;
  actualResults: string;
}

export interface AppState {
  setupInfo: SetupInfo;
  discoveredModules: DiscoveredModule[];
  testCases: TestCase[];
  cachedSuggestions: {
    forInputs: string;
    modules: SuggestedModule[];
  } | null;
}

export type AppAction =
  | { type: 'SET_SETUP_INFO'; payload: SetupInfo }
  | { type: 'ADD_DISCOVERED_MODULE'; payload: DiscoveredModule }
  | { type: 'ADD_DISCOVERED_MODULES'; payload: DiscoveredModule[] }
  | { type: 'UPDATE_DISCOVERED_MODULE_INSIGHTS'; payload: { id: string; insights: string } }
  | { type: 'ADD_TEST_CASES'; payload: TestCase[] }
  | { type: 'UPDATE_TEST_CASE'; payload: TestCase }
  | { type: 'DELETE_TEST_CASE'; payload: string } // id
  | { type: 'SET_TEST_CASES'; payload: TestCase[] } // For bulk updates, e.g. after import
  | { type: 'CACHE_SUGGESTIONS'; payload: { forInputs: string; modules: SuggestedModule[] } }
  | { type: 'RESET_STATE' }; // For clearing all data